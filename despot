#!/usr/bin/env bash

export VERSION="0.01.5"

function meta_text() {
  case $1 in
    "v")
      echo "despot ${VERSION}"
      ;;
    "h")
      cat << EOF
./despot [cmd]
      
commands:
--catalog       | display packages available for build
--help          | show this screen
--install [PKG] | compile a package
--list          | list all directories in pkg/src
--remove [PKG]  | remove given package 
--update        | git pull pkg/src & pkg/repo
--version       | display current version of despot
EOF
      ;;
  esac
}

function updater() {
  echo "updating: despot repo"
  git pull; echo
  for ((i=0; i<${#PKG_LIST[@]}; i++)); do
    echo "updating: ${PKG_LIST[i]}"
    cd pkg/src/"${PKG_LIST[i]}"
    git pull; cd ../../..; echo
  done
}

function remover() {
  if [ ! -z "$PACKAGE" ]; then
    if [ ! -f pkg/repo/"$PACKAGE".bash ]; then
      echo "ERROR: draumaz has yet to write a build script for $PACKAGE"
      exit
    else if [ ! -e pkg/src/"$PACKAGE" ]; then
      echo "ERROR: no sources for $PACKAGE in pkg/src"
      exit
    else
      bash pkg/repo/"$PACKAGE".bash uninstall
      echo "uninstalled."
    fi fi
  else
    echo "ERROR: no package name provided for removal."
  fi
}

function dependency_processor() {
  # Arch
  if [ ! "$(grep -i arch /etc/os-release)" == "" ]; then
    echo "$(grep -i ARCH_DEPS pkg/repo/$PACKAGE.bash | \
      sed 's/ARCH_DEPS//g' | \
      sed 's/=//g' | \
      sed 's/"//g')" | \
    xargs sudo pacman -S --noconfirm
  fi

  # Debian
  if [ ! "$(grep -i debian /etc/os-release)" == "" ]; then
    echo "$(grep -i DEB_DEPS pkg/repo/$PACKAGE.bash | \
      sed 's/DEB_DEPS//g' | \
      sed 's/=//g' | \
      sed 's/"//g')" | \
    xargs sudo apt-get install -y
  fi
  
  # Fedora
  if [ ! "$(grep -i fedora /etc/os-release)" == "" ]; then
    echo "$(grep -i RPM_DEPS pkg/repo/$PACKAGE.bash | \
      sed 's/RPM_DEPS//g' | \
      sed 's/=//g' | \
      sed 's/"//g')" | \
    xargs sudo dnf install -y
  fi
}

function installer() {
  if [ ! -f pkg/repo/"$PACKAGE".bash ]; then
    echo "ERROR: no build script available for $PACKAGE"
    exit
  fi
  if [ ! -e pkg/src/"$PACKAGE" ]; then
    echo "fetching sources for $PACKAGE"
    bash pkg/repo/"$PACKAGE".bash sources
  fi
  dependency_processor
  bash pkg/repo/"$PACKAGE".bash build
}

# Entry

if [ ! -e pkg/src ]; then mkdir -pv pkg/src; fi

PKG_LIST=(pkg/src/*)
for ((i=0; i<${#PKG_LIST[@]}; i++)); do
  PKG_LIST[i]=$(echo ${PKG_LIST[i]} | \
    sed 's|pkg/src/||g')
done

REPO_LIST=(pkg/repo/*.bash)
for ((i=0; i<${#REPO_LIST[@]}; i++)); do
  REPO_LIST[i]=$(echo ${REPO_LIST[i]} | \
    sed 's|pkg/repo/||g' | \
    sed 's/.bash//g')
done

OPTION="$1"
PACKAGE="$2"
OVERFLOW="$3"

if [ -z "$OPTION" ]; then OPTION="--help"; fi

arr=("$@")

case "$OPTION" in
  "--version" | "-v")
    meta_text "v"
    ;;
  "--help" | "-h")
    meta_text "h"
    ;;
  "--list" | "-l")
    echo -e "installed packages:\n"
    for ((i=0; i<${#PKG_LIST[@]}; i++)); do
      echo "- ${PKG_LIST[${i}]}"
    done
    ;;
  "--remove" | "-r")
    for ((i=1; i<${#arr[@]}; i++)); do
      PACKAGE="${arr[${i}]}"
      remover "$PACKAGE"
    done
    ;;
  "--catalog" | "-c")
    echo -e "available packages:\n"
    for ((i=0; i<${#REPO_LIST[@]}; i++)); do
      echo "- ${REPO_LIST[${i}]}"
    done
    ;;
  "--update" | "-u")
    updater
    ;;
  "--install" | "-i")
    for ((i=1; i<${#arr[@]}; i++)); do
      PACKAGE="${arr[${i}]}"
      installer "$PACKAGE"
    done
    ;;
  *)
    echo -e "ERROR: unrecognized command\n"
    meta_text "h"
    ;;
esac
