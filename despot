#!/usr/bin/env bash

if [[ ! "$SHELL" == *"bash"* ]]; then
cat << EOF
ERROR: bash is not the current shell.
please install bash to use despot.
EOF; exit; fi

if [[ ! "$(cat /etc/os-release)" == *"debian"* ]]; then
cat << EOF
===
WARNING: despot is made for debian-based systems.
dependency management will not work.
===

EOF; fi

export DESPOT_VERSION="0.01.6"

function meta_text() {
  case $1 in
    "v")
      echo "despot ${DESPOT_VERSION}"
      ;;
    "h")
      cat << EOF
./despot [cmd]
      
commands:
--catalog       | display packages available for build
--help          | show this screen
--install [PKG] | compile a package
--list          | list downloaded sources
--remove [PKG]  | remove given package 
--upgrade       | pull sources for updates and recompile
--version       | display current version of despot
EOF
      ;;
  esac
}

function updater() {
  echo "checking for src updates"
  git pull --quiet
  for ((i=0; i<${#PKG_LIST[@]}; i++)); do
    cd pkg/src/"${PKG_LIST[i]}"
    TOUCH_PULL=$(git pull)
    if [ ! "$TOUCH_PULL" == "Already up to date." ]; then 
      PKGS_TO_UPDATE+=("${PKG_LIST[i]}")
    fi
    cd ../../..
  done
  if [ "$PKGS_TO_UPDATE" == "" ]; then return; else
    for ((i=0; i<${#PKGS_TO_UPDATE[@]}; i++)); do
      PACKAGE="${PKGS_TO_UPDATE[${i}]}"
      installer "$PACKAGE"
    done
  fi
}

function remover() {
  if [ ! -z "$PACKAGE" ]; then
    if [ ! -f pkg/repo/"$PACKAGE".bash ]; then
      echo "ERROR: no build script available for $PACKAGE"
      exit
    else if [ ! -e pkg/src/"$PACKAGE" ]; then
      echo -e "ERROR: no sources for $PACKAGE in pkg/src, this might not work"
    fi fi
    bash pkg/repo/"$PACKAGE".bash uninstall
    echo "uninstalled."
  fi
}

function dependency_processor() {
  case "$(cat /etc/os-release)" in
    *debian*)
      HOTSWAP="DEB_DEPS"
      PACK="apt-get"
      PACK_ARG="install"
      PACK_ARG_ADTL="-y"
      ;;
    # ===
    # not currently used
    # ===
    #*arch*)
    #  HOTSWAP="ARCH_DEPS"
    #  PACK="pacman -S --noconfirm"
    #  PACK_ARG="-S"
    # PACK_ARG_ADTL="--noconfirm"
    # ;;
    #*fedora*)
    #  HOTSWAP="RPM_DEPS"
    #  PACK="dnf"
    #  PACK_ARG="install"
    #  PACK_ARG_ADTL="-y"
    #  ;;
  esac

  DEPS_TOINSTALL="$(grep -i $HOTSWAP pkg/repo/$PACKAGE.bash | sed "s|$HOTSWAP ||g")"
  if [ "$DEPS_TOINSTALL" == "" ]; then return; fi
  echo "$DEPS_TOINSTALL" | xargs sudo "$PACK" "$PACK_ARG" "$PACK_ARG_ADTL"
}

function installer() {
  if [ ! -f pkg/repo/"$PACKAGE".bash ]; then
    echo "ERROR: no build script available for $PACKAGE"
    exit
  fi
  if [ ! -e pkg/src/"$PACKAGE" ]; then
    echo "fetching sources for $PACKAGE"
    bash pkg/repo/"$PACKAGE".bash sources
  fi
  dependency_processor
  bash pkg/repo/"$PACKAGE".bash build
}

# Entry

if [ ! -e pkg/src ]; then mkdir -pv pkg/src; fi

OPTION="$1"
PACKAGE="$2"
OVERFLOW="$3"

PKGS_TO_UPDATE=()

PKG_LIST=(pkg/src/*)
for ((i=0; i<${#PKG_LIST[@]}; i++)); do
  PKG_LIST[i]=$(echo ${PKG_LIST[i]} | \
    sed 's|pkg/src/||g')
done

REPO_LIST=(pkg/repo/*.bash)
for ((i=0; i<${#REPO_LIST[@]}; i++)); do
  REPO_LIST[i]=$(echo ${REPO_LIST[i]} | \
    sed 's|pkg/repo/||g' | \
    sed 's/.bash//g')
done

if [ -z "$OPTION" ]; then OPTION="--help"; fi

arr=("$@")

case "$OPTION" in
  "--version" | "-v")
    meta_text "v"
    ;;
  "--help" | "-h")
    meta_text "h"
    ;;
  "--list" | "-l")
    echo -e "downloaded sources:\n"
    for ((i=0; i<${#PKG_LIST[@]}; i++)); do
      echo "- ${PKG_LIST[${i}]}"
    done
    ;;
  "--remove" | "-r")
    for ((i=1; i<${#arr[@]}; i++)); do
      PACKAGE="${arr[${i}]}"
      remover "$PACKAGE"
    done
    ;;
  "--catalog" | "-c")
    echo -e "available packages:\n"
    for ((i=0; i<${#REPO_LIST[@]}; i++)); do
      echo -n "- ${REPO_LIST[${i}]}"
      if [ -e "pkg/src/${REPO_LIST[${i}]}" ]; then echo " [DOWNLOADED]"; else echo; fi
    done
    ;;
  "--update" | "-u")
    updater
    ;;
  "--install" | "-i")
    for ((i=1; i<${#arr[@]}; i++)); do
      PACKAGE="${arr[${i}]}"
      installer "$PACKAGE"
    done
    ;;
  *)
    echo -e "ERROR: unrecognized command\n"
    meta_text "h"
    ;;
esac
